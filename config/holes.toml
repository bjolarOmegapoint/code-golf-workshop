# TODO
#
# Art
#  - Swallowed a Fly
#
# Computing
#  - Deadfish
#
# Mathematics
#  - K (Khinchin's constant)
#
# Sequence
#  - Fortunate Numbers
#  - Lucky Primes
#  - Perfect Numbers
#  - Semiprime Numbers
#  - Sphenic Numbers
#  - Triangular Numbers
#
# Transform
#  - £sd

['99 Bottles of Beer']
category = 'Art'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/99_Bottles_of_Beer' },
    { name = 'Wikipedia',    url = '//en.wikipedia.org/wiki/99_Bottles_of_Beer' },
]
released = 2017-07-06
synopsis = 'Print the lyrics to the song “99 Bottles of Beer”.'
preamble = '''
<p>Print the lyrics to the song <b>99 Bottles of Beer</b>:</p>

<blockquote>99 bottles of beer on the wall, 99 bottles of beer.
Take one down and pass it around, 98 bottles of beer on the wall.
<br><br>
98 bottles of beer on the wall, 98 bottles of beer.
Take one down and pass it around, 97 bottles of beer on the wall.
<br><br>
…
<br><br>
1 bottle of beer on the wall, 1 bottle of beer.
Take one down and pass it around, no more bottles of beer on the wall.
<br><br>
No more bottles of beer on the wall, no more bottles of beer.
Go to the store and buy some more, 99 bottles of beer on the wall.
</blockquote>
'''

['ASCII Table']
category = 'Art'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Show_ASCII_table' },
]
released = 2022-03-26
synopsis = 'Print the hex ASCII table from “man 7 ascii”.'
preamble = '''
<p>Print the following hex ASCII table, taken from <code>man 7 ascii</code>.

<pre>
   2 3 4 5 6 7
 -------------
0:   0 @ P ` p
1: ! 1 A Q a q
2: " 2 B R b r
3: # 3 C S c s
4: $ 4 D T d t
5: % 5 E U e u
6: & 6 F V f v
7: ' 7 G W g w
8: ( 8 H X h x
9: ) 9 I Y i y
A: * : J Z j z
B: + ; K [ k {
C: , < L \ l |
D: - = M ] m }
E: . > N ^ n ~
F: / ? O _ o DEL
</pre>
'''

[brainfuck]
category = 'Computing'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Execute_Brain****' },
    { name = 'Wikipedia',    url = '//en.wikipedia.org/wiki/Brainfuck' },
]
released = 2018-01-27
synopsis = 'Write a Brainfuck interpreter.'
preamble = '''
<p>
    Brainfuck is a minimalistic esoteric programming language created by
    Urban Müller in 1993.

<p>
    Assuming an infinitely large array, the entire brainfuck alphabet matches
    the following pseudocode:

<div>
    <table>
        <thead>
            <tr>
                <th>Cmd
                <th>Pseudocode
        <tbody>
            <tr>
                <th>&gt;
                <td>ptr++
            <tr>
                <th>&lt;
                <td>ptr--
            <tr>
                <th>+
                <td>array[ptr]++
            <tr>
                <th>-
                <td>array[ptr]--
            <tr>
                <th>.
                <td>print(chr(array[ptr]))
            <tr>
                <th>[
                <td>while(array[ptr]){
            <tr>
                <th>]
                <td>}
    </table>
</div>

<p>
    Write a program that will receive various brainfuck programs as arguments
    and execute each program in turn.
'''

[Diamonds]
category = 'Art'
released = 2018-06-06
synopsis = 'Draw a size ascending range of diamonds using the numbers 1 to 9.'
preamble = '''
<p>
    Draw a size ascending range of diamonds using the numbers <b>1</b> to
    <b>9</b>, ranging from size <b>1</b> to size <b>9</b>, each diamond
    separated by a blank line.<p>A size <b>1</b> diamond should look like
    this, a single centered <b>1</b>:

<pre>         1</pre>

<p>With the largest size <b>9</b> diamond looking like this:

<pre>         1
        121
       12321
      1234321
     123454321
    12345654321
   1234567654321
  123456787654321
 12345678987654321
  123456787654321
   1234567654321
    12345654321
     123454321
      1234321
       12321
        121
         1
</pre>
'''

[Divisors]
category = 'Sequence'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Proper_divisors' },
]
released = 2018-01-10
synopsis = 'Print the positive divisors of each number from 1 to 100.'
preamble = '''
<p>
    A number is a divisor of another number if it can divide into it with no
    remainder.

<p>
    Print the positive divisors of each number from <b>1</b> to <b>100</b>
    inclusive, on their own line, with each divisor separated by a space.
'''

[Fibonacci]
category = 'Sequence'
links = [
    { name = 'OEIS A000045', url = '//oeis.org/A000045' },
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Fibonacci_sequence' },
    { name = 'Wikipedia',    url = '//en.wikipedia.org/wiki/Fibonacci_number' },
]
released = 2017-09-16
synopsis = 'Print the first 31 Fibonacci numbers.'
preamble = '''
<p>
    The Fibonacci numbers are a numerical sequence in which each number is the
    sum of the two preceding numbers: <b>0, 1, 1, 2, 3, 5, 8, 13…</b>
<p>
    Print the first <b>31</b> Fibonacci numbers from <b>F<sub>0</sub> = 0</b>
    to <b>F<sub>30</sub> = 832040</b> (inclusive), each on a separate line.
'''

['Fizz Buzz']
category = 'Sequence'
releases = [2017-05-22, 2021-11-21]
variants = ['Fizz Buzz', 'Foo Fizz Buzz Bar']
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/FizzBuzz' },
    { name = 'Wikipedia',    url = '//en.wikipedia.org/wiki/Fizz_buzz' },
]
synopsis = 'Print {{ . }}.'
preamble = '''
<p>
    Print the numbers from <b>1</b> to
    <b>{{ if eq . "Fizz Buzz" }}100{{ else }}1,000{{ end }}</b>
    inclusive, each on their own line.

<p>
{{ if eq . "Fizz Buzz" }}
    If, however, the number is a multiple of <b>three</b> then print
    <b>Fizz</b> instead, and if the number is a multiple of <b>five</b> then
    print <b>Buzz</b>.
{{ else }}
    If, however, the number is a multiple of <b>two</b> then print <b>Foo</b>
    instead, if the number is a multiple of <b>three</b> then print
    <b>Fizz</b>, if the number is a multiple of <b>five</b> then print
    <b>Buzz</b>, and if the number is a multiple of <b>seven</b> then print
    <b>Bar</b>.
{{ end }}

<p>
    If multiple conditions hold true then all replacements should be printed,
    for example <b>15</b> should print <b>FizzBuzz</b>.
'''

['Prime Numbers']
category = 'Sequence'
releases = [2017-10-04, 2021-12-05]
variants = ['Prime Numbers', 'Prime Numbers (Long)']
links = [
    { name = 'OEIS A000040', url = '//oeis.org/A000040' },
    { name = 'Wikipedia',    url = '//en.wikipedia.org/wiki/Prime_number' },
]
synopsis = '''
Print all the prime numbers from 1 to
{{- if hasSuffix . "(Long)" }} 10,000.{{ else }} 100.{{ end -}}
'''
preamble = '''
<p>
    Print all the prime numbers from <b>1</b> to
    <b>{{ if hasSuffix . "(Long)" }}10,000{{ else }}100{{ end }}</b>
    inclusive, each on their own line.
'''

['Rule 110']
category = 'Computing'
links = [
    { name = 'Wikipedia', url = '//en.wikipedia.org/wiki/Rule_110' },
]
released = 2018-07-06
synopsis = 'Print the first 100 rows in the Rule 110 cellular automaton.'
preamble = '''
<p>
    Print the first <b>100</b> rows in the Rule 110 cellular automaton
    starting from an initial single living cell.

<p>
    Each new row in the life of the automaton should be a new line, and the
    rules for whether a cell is alive or dead depends on whether it was alive
    on the previous iteration, as well as the state of the two neighbouring
    cells.

<p>
    The rules which dictate whether a cell is alive or dead in the next
    iteration are as follows:

<div>
    <table>
        <thead>
            <tr>
                <th>Previous Cells
                <th>New Centre Cell
        <tbody>
            <tr><td class=right>111<td class=right>0
            <tr><td class=right>110<td class=right>1
            <tr><td class=right>101<td class=right>1
            <tr><td class=right>100<td class=right>0
            <tr><td class=right>011<td class=right>1
            <tr><td class=right>010<td class=right>1
            <tr><td class=right>001<td class=right>1
            <tr><td class=right>000<td class=right>0
    </table>
</div>

<p>
    where 1 is alive, 0 is dead, and the middle digit represents the previous
    state of the current cell.

<p>The first 10 rows are shown here:

<pre>         █
        ██
       ███
      ██ █
     █████
    ██   █
   ███  ██
  ██ █ ███
 ███████ █
██     ███
</pre>
'''

['Sierpiński Triangle']
category = 'Art'
links = [
    { name = 'Rosetta Code', url = '//rosettacode.org/wiki/Sierpinski_triangle' },
    { name = 'Wikipedia',    url = '//en.wikipedia.org/wiki/Sierpiński_triangle' },
]
released = 2017-10-08
synopsis = 'Draw the Sierpiński triangle.'
preamble = '''
<p>
    The Sierpiński triangle is a fractal with the overall shape of an
    equilateral triangle, subdivided recursively into smaller equilateral
    triangles.

<p>
    A Sierpiński triangle of order 4 should look like this, print such an
    output:

<pre>               ▲
              ▲ ▲
             ▲   ▲
            ▲ ▲ ▲ ▲
           ▲       ▲
          ▲ ▲     ▲ ▲
         ▲   ▲   ▲   ▲
        ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲
       ▲               ▲
      ▲ ▲             ▲ ▲
     ▲   ▲           ▲   ▲
    ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲
   ▲       ▲       ▲       ▲
  ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲
 ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲
▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲
</pre>
'''
